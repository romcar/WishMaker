name: Deploy to GitHub Pages

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    # Build job using Docker Compose
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub (for caching)
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
              continue-on-error: true

            - name: Create .env file for Docker Compose
              run: |
                  cat > .env << EOF
                  # Database Configuration
                  DATABASE_URL=postgres://postgres:password@postgres:5432/wishmaker
                  DB_HOST=postgres
                  DB_PORT=5432
                  DB_NAME=wishmaker
                  DB_USER=postgres
                  DB_PASSWORD=password

                  # PostgreSQL Container Configuration
                  POSTGRES_DB=wishmaker
                  POSTGRES_USER=postgres
                  POSTGRES_PASSWORD=password

                  # JWT Configuration
                  JWT_SECRET=github-actions-build-secret-not-for-production-use

                  # Backend Configuration
                  PORT=8000
                  NODE_ENV=production

                  # Frontend Configuration
                  REACT_APP_API_URL=https://your-backend-domain.com
                  PUBLIC_URL=/WishMaker

                  # WebAuthn Configuration (for build)
                  RP_NAME=WishMaker
                  RP_ID=localhost
                  ORIGIN=http://localhost:3000

                  # CORS Configuration
                  CORS_ORIGIN=https://romcar.github.io
                  EOF

            - name: Build all services with Docker Compose
              run: |
                  # Build all services (backend, frontend, database)
                  docker-compose build

                  # Start services to ensure they work and extract build artifacts
                  docker-compose up -d

                  # Wait for services to be ready
                  sleep 30

                  # Check if services are running
                  docker-compose ps

                  # Test backend health (optional)
                  echo "Testing backend connectivity..."
                  timeout 30 bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do echo "Waiting for backend..."; sleep 2; done' || echo "Backend health check timeout - continuing with build"

                  # Test database connectivity
                  echo "Testing database connectivity..."
                  docker-compose exec -T postgres pg_isready -U postgres || echo "Database not ready - continuing"

            - name: Verify services and logs
              run: |
                  echo "=== Service Status ==="
                  docker-compose ps

                  echo "=== Backend Logs ==="
                  docker-compose logs backend | tail -20

                  echo "=== Frontend Logs ==="
                  docker-compose logs frontend | tail -20

                  echo "=== Database Logs ==="
                  docker-compose logs postgres | tail -10

            - name: Extract frontend build from container
              run: |
                  # Create build directory
                  mkdir -p ./frontend-build

                  # Copy built files from the frontend container
                  docker cp wishmaker-frontend:/app/build ./frontend-build/

                  # Verify the build exists and has content
                  if [ ! -d "./frontend-build/build" ]; then
                      echo "ERROR: Frontend build directory not found!"
                      exit 1
                  fi

                  # List the extracted files to verify
                  echo "=== Frontend Build Contents ==="
                  ls -la ./frontend-build/build/

                  # Check for essential files
                  if [ ! -f "./frontend-build/build/index.html" ]; then
                      echo "ERROR: index.html not found in build!"
                      exit 1
                  fi

                  echo "Frontend build extraction successful!"

            - name: Stop and cleanup Docker services
              run: |
                  docker-compose down
                  docker system prune -f

            - name: Setup Pages
              uses: actions/configure-pages@v4

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./frontend-build/build

    # Deployment job
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
